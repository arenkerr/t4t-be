# import BaseError from 'error.typeDefs.gql'
# import UnknownError from 'error.typeDefs.gql'
# import InvalidCredentialsError from 'error.typeDefs.gql'
# import isUser from 'directives.typeDefs.gql'

scalar Date

type User {
  id: ID!
  username: String!
  password: String @isUser
  email: String @isUser
  bio: String
  avatarUrl: String
  createdAt: Date!
  sessionId: String
}

# TODO: validate user result
type UsernameExistsError implements BaseError {
  message: String!
}

type DuplicateEmailError implements BaseError {
  message: String!
}

union CreateUserResult = User | UnknownError

type LoginData {
  userId: String!
  sessionId: String!
}

union LoginResult = LoginData | UnknownError | InvalidCredentialsError

union QueryUserResult = User | UnknownError
